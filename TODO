Needs to be implemented:
1)	Checkpointing

	- Involves serializing wavefunction and potentials, as well as config
	data

2)	Potentials of P_i and X_j where i != j

	- Implement a more fine grained fft
	- we'll also need the "proper change of representation" mentioned below
	UPDATE: This has been implemented in revision 51

3)	Dynamic potentials

	- Implement a potentialwrapper for dynamic potentials
	UPDATE: This has been implemented in revision 50

4)	Semi-static potentials

	- Implement static potentials where timestep can be changed

5)	Proper change of representation (change representation-object 
	on wavefunction according to transformations)
	
	use SetRepresentation when we transform the wavefunction. The representations should
	be cached somewhere, probably in the transformation class.
	
	UPDATE: This  has been implemented in revision 35.
	

Stuff that doesn't work for nproc > 1:
1)
	Representation::InnerProduct
	Wavefunction::InnerProduct
	Wavefunction::Normalize

	Inner products require a reduction or something. This is not implemented
	yet. As a consequence, imaginary time does not work for nproc > 1

	Solution: Implement a MPI-based Inner product. I'm unsure wether to
	implement the mpi calls in each representation implementation, 
	in the abstract representation class, or in the DistributedModel class

2)
	Loading wavefunctions from file

	This requires some sort of sequential access, and furthermore, 
	the current fileformat (pickle) doesnt really support reading or writing
	only parts of the wavefunction

	Solution: Create my own file format for arrays that allows us to read or
	write from several procs.
