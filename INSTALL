
PREREQUISITES:
	Programs:
	- cmake (for building gccxml)
	- gccxml (used by pyste)
	- python >=2.3

	Libraries:	
	- blitz (numerical arrays in c++)
	- boost (we're using boost::python for c++/python integration
	- fftw3 (fourier transforms)
	
	Python modules:
	- numpy (numerical arrays in python)
	- pymatlib (for plotting)
	- elementtree (used py pyste)
	- ipython (impropved interface)
	

-----------------------------------------------------------------------------
--------------                    Programs                     --------------
-----------------------------------------------------------------------------	

cmake:
-----------------------------------------------------------------------------	
./configure --prefix=$HOME/sys
make
make install


gccxml:
-----------------------------------------------------------------------------	
cmake -i .
(change the prefix to /home/..../)
make
make install


python:
-----------------------------------------------------------------------------	
./configure --prefix=$HOME/sys
make
make install


-----------------------------------------------------------------------------
--------------                    Libraries                    --------------
-----------------------------------------------------------------------------	

fftw3:
-----------------------------------------------------------------------------	
./configure --prefix=$HOME/sys --with-pic
make
make install


blitz:
-----------------------------------------------------------------------------	
You must apply the patch with some modifications to boost in order to use it with
the propagator

patch -p0 < blitz-tore.patch
./configure --prefix=$HOME/sys --with-fpic 
make 
make install


boost:
-----------------------------------------------------------------------------	
We'll leave a staged (not installed) version of boost in the source dir,
for autoconf to find. In ~/.bashrc, you should set 
BOOST_ROOT=$HOME/download/lib/boost_1_33_1 
or wherever you downloaded boost. We will also install pyste, which used to
generate boost::python source files

./configure --prefix=$HOME/sys
make (--without-wave)
make install
bjam stage
cd ./libs/python/pyste/install/
python setup.py install --home=$HOME/sys


-----------------------------------------------------------------------------
--------------                    Python modules               --------------
-----------------------------------------------------------------------------	

numpy:
-----------------------------------------------------------------------------
on some platforms (fimm), I've been unable to use the proper lapack routines, and 
have had to manually disable them in numpy/linalg/setup.py, in order for numpy
to use its internal (slower) linalg routines.

python setup.py build
python setup.py install --home=$HOME/sys

pymatlib:
-----------------------------------------------------------------------------	
make sure you have tk development libraries installed, as well as tkinter
(python tk module), otherwise the TkAgg module will not be compiled, and
you will most probably not get interactive plotting.

python setup.py build
python setup.py install --home=$HOME/sys

mkdir ~/.matplotlib
cp misc/matplotlibrc ~/.matplotlib/


elementtree:
-----------------------------------------------------------------------------	
python setup.py build
python setup.py install --home=$HOME/sys


ipython:
-----------------------------------------------------------------------------	
python setup.py build
python setup.py install --home=$HOME/sys



-----------------------------------------------------------------------------
--------------                    Compile pyprop core          --------------
-----------------------------------------------------------------------------	

#Modify Makefile.platform to your needs
cp Makefile.platform.example Makefile.platform
#make the core library
make

#for python to find pyprop, the root folder must be in $PYTHONPATH
export PYTHONPATH="$HOME/prog/pyprop:$PYTHONPATH"
#for the addon modules to find the core library, it must be in $LD_LIBRARY_PATH
export LD_LIBRARY_PATH="$HOME/prog/pyprop/pyprop/core:$LD_LIBRARY_PATH"
