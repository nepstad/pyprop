diff -Naur src/mmpi_collective.h ../../mikempi-1.0.102/src/mmpi_collective.h
--- src/mmpi_collective.h	2006-01-31 21:53:58.000000000 +0100
+++ ../../mikempi-1.0.102/src/mmpi_collective.h	2006-07-11 22:15:03.000000000 +0200
@@ -141,7 +141,7 @@
     int count;
     MPI_Datatype datatype;
     MPI_Comm comm;
-    long op;
+    MPI_Op op;
     PyArrayObject *result;
     PyArrayObject *array;
     PyObject *input;
diff -Naur src/mmpi_module.c ../../mikempi-1.0.102/src/mmpi_module.c
--- src/mmpi_module.c	2006-06-08 22:54:39.000000000 +0200
+++ ../../mikempi-1.0.102/src/mmpi_module.c	2006-07-11 21:43:14.000000000 +0200
@@ -102,6 +102,7 @@
 static PyObject *mmpi_init(PyObject * self, PyObject * args)
 {
     int initialized;
+    int numargs = 1;
     char **myargv = { "fake_argv\0" };
     int numprocs, myid;
 
@@ -112,7 +113,7 @@
     ierror = MPI_Initialized(&initialized);
 
     if (!initialized) {
-      ierror = MPI_Init(1, myargv);
+      ierror = MPI_Init(&numargs, &myargv);
     } 
 
     ierror = MPI_Comm_size(MPI_COMM_WORLD, &numprocs);
diff -Naur src/mmpi_utilities.h ../../mikempi-1.0.102/src/mmpi_utilities.h
--- src/mmpi_utilities.h	2006-01-31 21:53:58.000000000 +0100
+++ ../../mikempi-1.0.102/src/mmpi_utilities.h	2006-07-11 21:27:49.000000000 +0200
@@ -30,37 +30,31 @@
 #include "mmpi_globals.h"
 
 /* This function translates an MPI Type into a Python Type. */
-int getPythonType(long mpitype)
+int getPythonType(MPI_Datatype mpitype)
 {
   /* Please take note of the shortcutting here when reorganizing 
      For instance, MPI_LONG and MPI_UNSIGNED_LONG both
      drop through to the same return PyArray_LONG; 
    */
-    switch (mpitype) {
-    case((long)MPI_BYTE):
-      return PyArray_SBYTE;/* Or PyArray_UBYTE (signed / unsigned) */
-    case ((long)MPI_CHAR):
+    if (mpitype == MPI_BYTE)
+    	return PyArray_SBYTE;/* Or PyArray_UBYTE (signed / unsigned) */
+    if (mpitype == MPI_CHAR)
       return PyArray_CHAR;
-    case((long)MPI_SHORT):
+    if (mpitype == MPI_SHORT)
       return PyArray_SHORT;
-    case ((long) MPI_INT):
+    if (mpitype == MPI_INT)
       return PyArray_INT;
-    case((long)MPI_LONG):
+    if (mpitype == MPI_LONG)
       return PyArray_LONG;
-    case ((long) MPI_FLOAT):
+    if (mpitype == MPI_FLOAT)
       return PyArray_FLOAT;
-    case ((long) MPI_DOUBLE):
+    if (mpitype == MPI_DOUBLE)
       return PyArray_DOUBLE;
-    case ((long) MPI_PACKED):
-      /* this falls through to default */
-    default:
-      {
-#warning "TODO: the default case in getPythonType should probably throw an exception (TypeError,ValueError) or something rather then just print a warning.\n"
-      /* Set an exception handler and return ?? */
-      printf("*** Unknown MPI Type -- (Assuming MPI_INT)! ***\n");
-      return PyArray_INT;
-      }
-    }
+
+    #warning "TODO: the default case in getPythonType should probably throw an exception (TypeError,ValueError) or something rather then just print a warning.\n"
+    /* Set an exception handler and return ?? */
+    printf("*** Unknown MPI Type -- (Assuming MPI_INT)! ***\n");
+    return PyArray_INT;
 }
 
 #endif
