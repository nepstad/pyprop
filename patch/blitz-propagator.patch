diff -Naur blitz/array/methods.cc ../../blitz-0.9/blitz/array/methods.cc
--- blitz/array/methods.cc	2004-09-17 01:50:26.000000000 +0200
+++ ../../blitz-0.9/blitz/array/methods.cc	2006-07-25 17:51:21.904740813 +0200
@@ -351,6 +351,43 @@
 }
 
 template<typename P_numtype, int N_rank>
+void Array<P_numtype, N_rank>::changeOrdering(const TinyVector<int, N_rank> &newOrder)
+{
+    BZPRECHECK(sum(newOrder) == N_rank * (N_rank-1) / 2,
+        "Invalid array changeOrdering() arguments." << endl
+        << "newOrder must be a permutation of the numerals (0,...,"
+        << (N_rank - 1) << ")");
+
+    //Create reference copy
+    Array<P_numtype, N_rank> array(*this);
+
+    for (int i=0; i < N_rank; i++)
+    {
+        int src = array.ordering(i);
+	int dst = newOrder(i);
+    	length_[dst] = array.length_[src];
+	stride_[dst] = array.stride_[src];
+	storage_.setAscendingFlag(dst, array.isRankStoredAscending(src));
+	storage_.setBase(dst, array.base(src));
+	storage_.setOrdering(i, dst);
+    }
+}
+
+template<typename P_numtype, int N_rank>
+void Array<P_numtype, N_rank>::changeShape(const TinyVector<int, N_rank> &newShape)
+{
+    BZPRECHECK(product(newShape) == size(),
+        "Invalid array changeShape() arguments." << endl
+        << "newShape (" << newShape << ") must total to a size equal to the "
+	<< "existing array (" << length_ << ")." << endl
+	<< " " << product(newShape) << " != " << product(length_) << endl);
+
+    length_ = newShape;    
+    computeStrides();
+}
+
+
+template<typename P_numtype, int N_rank>
 void Array<P_numtype, N_rank>::reverseSelf(int rank)
 {
     BZPRECONDITION(rank < N_rank);
diff -Naur blitz/array/newet-macros.h ../../blitz-0.9/blitz/array/newet-macros.h
--- blitz/array/newet-macros.h	2005-10-08 03:04:51.000000000 +0200
+++ ../../blitz-0.9/blitz/array/newet-macros.h	2006-07-25 17:51:32.341210802 +0200
@@ -34,15 +34,15 @@
  * Unary functions and operators
  */
 
-#define BZ_DECLARE_ARRAY_ET_UNARY(name,functor)                           \
-                                                                          \
-template <typename T1>                                                    \
-_bz_inline_et                                                             \
-typename BzUnaryExprResult<functor,T1>::T_result                          \
-name(const ETBase<T1>& d1)                                                \
-{                                                                         \
-    typedef typename BzUnaryExprResult<functor,T1>::T_result result;      \
-    return result(asExpr<T1>::getExpr(d1.unwrap()));                      \
+#define BZ_DECLARE_ARRAY_ET_UNARY(name,functor)                                                            \
+                                                                                                           \
+template <typename T1>                                                                                     \
+_bz_inline_et                                                                                              \
+typename BZ_BLITZ_SCOPE(BzUnaryExprResult)<functor,T1>::T_result                                           \
+name(const BZ_BLITZ_SCOPE(ETBase)<T1>& d1)                                                                 \
+{                                                                                                          \
+    typedef typename BZ_BLITZ_SCOPE(BzUnaryExprResult)<functor,T1>::T_result result;                       \
+    return result(BZ_BLITZ_SCOPE(asExpr)<T1>::getExpr(d1.unwrap()));                                       \
 }
 
 /*
@@ -52,62 +52,62 @@
  * which implements the operation.
  */
 
-#define BZ_DECLARE_ARRAY_ET_BINARY(name, applic)                          \
-                                                                          \
-template <typename T1,typename T2>                                        \
-_bz_inline_et                                                             \
-typename BzBinaryExprResult<applic,T1,T2>::T_result                       \
-name(const ETBase<T1>& d1,const ETBase<T2>& d2)                           \
-{                                                                         \
-    typedef typename BzBinaryExprResult<applic,T1,T2>::T_result result;   \
-    return result(asExpr<T1>::getExpr(d1.unwrap()),                       \
-                  asExpr<T2>::getExpr(d2.unwrap()));                      \
+#define BZ_DECLARE_ARRAY_ET_BINARY(name, applic)                                                           \
+                                                                                                           \
+template <typename T1,typename T2>                                                                         \
+_bz_inline_et                                                                                              \
+typename BZ_BLITZ_SCOPE(BzBinaryExprResult)<applic,T1,T2>::T_result                                        \
+name(const BZ_BLITZ_SCOPE(ETBase)<T1>& d1,const BZ_BLITZ_SCOPE(ETBase)<T2>& d2)                            \
+{                                                                                                          \
+    typedef typename BZ_BLITZ_SCOPE(BzBinaryExprResult)<applic,T1,T2>::T_result result;                    \
+    return result(BZ_BLITZ_SCOPE(asExpr)<T1>::getExpr(d1.unwrap()),                                        \
+                  BZ_BLITZ_SCOPE(asExpr)<T2>::getExpr(d2.unwrap()));                                       \
 }
 
-#define BZ_DECLARE_ARRAY_ET_BINARY_TINYVEC(name, applic)                  \
-                                                                          \
-template <typename T1, typename T2, int N>                                \
-_bz_inline_et                                                             \
-typename BzBinaryExprResult<applic,TinyVector<T2,N>,T1>::T_result         \
-name(const TinyVector<T2,N> d1, const ETBase<T1>& d2)                     \
-{                                                                         \
-    typedef typename                                                      \
-        BzBinaryExprResult<applic,TinyVector<T2,N>,T1>::T_result result;  \
-    return result(asExpr<TinyVector<T2,N> >::getExpr(d1),                 \
-                  asExpr<T1>::getExpr(d2.unwrap()));                      \
-}                                                                         \
-                                                                          \
-template <typename T1, typename T2, int N>                                \
-_bz_inline_et                                                             \
-typename BzBinaryExprResult<applic,T1,TinyVector<T2,N> >::T_result        \
-name(const ETBase<T1>& d1, const TinyVector<T2,N> d2)                     \
-{                                                                         \
-    typedef typename                                                      \
-        BzBinaryExprResult<applic,T1,TinyVector<T2,N> >::T_result result; \
-    return result(asExpr<T1>::getExpr(d1.unwrap()),                       \
-                  asExpr<TinyVector<T2,N> >::getExpr(d2));                \
+#define BZ_DECLARE_ARRAY_ET_BINARY_TINYVEC(name, applic)                                                   \
+                                                                                                           \
+template <typename T1, typename T2, int N>                                                                 \
+_bz_inline_et                                                                                              \
+typename BZ_BLITZ_SCOPE(BzBinaryExprResult)<applic,BZ_BLITZ_SCOPE(TinyVector)<T2,N>,T1>::T_result          \
+name(const BZ_BLITZ_SCOPE(TinyVector)<T2,N> d1, const BZ_BLITZ_SCOPE(ETBase)<T1>& d2)                      \
+{                                                                                                          \
+    typedef typename                                                                                       \
+        BZ_BLITZ_SCOPE(BzBinaryExprResult)<applic,BZ_BLITZ_SCOPE(TinyVector)<T2,N>,T1>::T_result result;   \
+    return result(BZ_BLITZ_SCOPE(asExpr)<BZ_BLITZ_SCOPE(TinyVector)<T2,N> >::getExpr(d1),                  \
+                  BZ_BLITZ_SCOPE(asExpr)<T1>::getExpr(d2.unwrap()));                                       \
+}                                                                                                          \
+                                                                                                           \
+template <typename T1, typename T2, int N>                                                                 \
+_bz_inline_et                                                                                              \
+typename BZ_BLITZ_SCOPE(BzBinaryExprResult)<applic,T1,BZ_BLITZ_SCOPE(TinyVector)<T2,N> >::T_result         \
+name(const BZ_BLITZ_SCOPE(ETBase)<T1>& d1, const BZ_BLITZ_SCOPE(TinyVector)<T2,N> d2)                      \
+{                                                                                                          \
+    typedef typename                                                                                       \
+        BZ_BLITZ_SCOPE(BzBinaryExprResult)<applic,T1,BZ_BLITZ_SCOPE(TinyVector)<T2,N> >::T_result result;  \
+    return result(BZ_BLITZ_SCOPE(asExpr)<T1>::getExpr(d1.unwrap()),                                        \
+                  BZ_BLITZ_SCOPE(asExpr)<BZ_BLITZ_SCOPE(TinyVector)<T2,N> >::getExpr(d2));                 \
 }
 
-#define BZ_DECLARE_ARRAY_ET_BINARY_SCALAR(name, applic, sca)              \
-                                                                          \
-template<typename T>                                                      \
-_bz_inline_et                                                             \
-typename BzBinaryExprResult<applic,sca,T>::T_result                       \
-name(const sca d1, const ETBase<T>& d2)                                   \
-{                                                                         \
-    typedef typename BzBinaryExprResult<applic,sca,T>::T_result result;   \
-    return result(asExpr<sca >::getExpr(d1),                              \
-                  asExpr<T>::getExpr(d2.unwrap()));                       \
-}                                                                         \
-                                                                          \
-template<typename T>                                                      \
-_bz_inline_et                                                             \
-typename BzBinaryExprResult<applic,T,sca >::T_result                      \
-name(const ETBase<T>& d1, const sca d2)                                   \
-{                                                                         \
-    typedef typename BzBinaryExprResult<applic,T,sca >::T_result result;  \
-    return result(asExpr<T>::getExpr(d1.unwrap()),                        \
-                  asExpr<sca >::getExpr(d2));                             \
+#define BZ_DECLARE_ARRAY_ET_BINARY_SCALAR(name, applic, sca)                                               \
+                                                                                                           \
+template<typename T>                                                                                       \
+_bz_inline_et                                                                                              \
+typename BZ_BLITZ_SCOPE(BzBinaryExprResult)<applic,sca,T>::T_result                                        \
+name(const sca d1, const BZ_BLITZ_SCOPE(ETBase)<T>& d2)                                                    \
+{                                                                                                          \
+    typedef typename BZ_BLITZ_SCOPE(BzBinaryExprResult)<applic,sca,T>::T_result result;                    \
+    return result(BZ_BLITZ_SCOPE(asExpr)<sca >::getExpr(d1),                                               \
+                  BZ_BLITZ_SCOPE(asExpr)<T>::getExpr(d2.unwrap()));                                        \
+}                                                                                                          \
+                                                                                                           \
+template<typename T>                                                                                       \
+_bz_inline_et                                                                                              \
+typename BZ_BLITZ_SCOPE(BzBinaryExprResult)<applic,T,sca >::T_result                                       \
+name(const BZ_BLITZ_SCOPE(ETBase)<T>& d1, const sca d2)                                                    \
+{                                                                                                          \
+    typedef typename BZ_BLITZ_SCOPE(BzBinaryExprResult)<applic,T,sca >::T_result result;                   \
+    return result(BZ_BLITZ_SCOPE(asExpr)<T>::getExpr(d1.unwrap()),                                         \
+                  BZ_BLITZ_SCOPE(asExpr)<sca >::getExpr(d2));                                              \
 }
 
 /*
@@ -117,17 +117,17 @@
  * which implements the operation.
  */
 
-#define BZ_DECLARE_ARRAY_ET_TERNARY(name, applic)                             \
-                                                                              \
-template <typename T1, typename T2, typename T3>                              \
-_bz_inline_et                                                                 \
-typename BzTernaryExprResult<applic, T1, T2, T3>::T_result                    \
-name(const ETBase<T1>& d1, const ETBase<T2>& d2, const ETBase<T3>& d3)        \
-{                                                                             \
-    typedef typename BzTernaryExprResult<applic,T1,T2,T3>::T_result result;   \
-    return result(asExpr<T1>::getExpr(d1.unwrap()),                           \
-                  asExpr<T2>::getExpr(d2.unwrap()),                           \
-                  asExpr<T3>::getExpr(d3.unwrap()));                          \
+#define BZ_DECLARE_ARRAY_ET_TERNARY(name, applic)                                                          \
+                                                                                                           \
+template <typename T1, typename T2, typename T3>                                                           \
+_bz_inline_et                                                                                              \
+typename BZ_BLITZ_SCOPE(BzTernaryExprResult)<applic, T1, T2, T3>::T_result                                 \
+name(const BZ_BLITZ_SCOPE(ETBase)<T1>& d1, const BZ_BLITZ_SCOPE(ETBase)<T2>& d2, const BZ_BLITZ_SCOPE(ETBase)<T3>& d3)        \
+{                                                                                                          \
+    typedef typename BZ_BLITZ_SCOPE(BzTernaryExprResult)<applic,T1,T2,T3>::T_result result;                \
+    return result(BZ_BLITZ_SCOPE(asExpr)<T1>::getExpr(d1.unwrap()),                                        \
+                  BZ_BLITZ_SCOPE(asExpr)<T2>::getExpr(d2.unwrap()),                                        \
+                  BZ_BLITZ_SCOPE(asExpr)<T3>::getExpr(d3.unwrap()));                                       \
 }
     
 #else /* !BZ_HAVE_TEMPLATES_AS_TEMPLATE_ARGUMENTS */
@@ -136,19 +136,19 @@
  * Unary functions and operators
  */
 
-#define BZ_DECLARE_ARRAY_ET_UNARY(name, functor)                          \
-                                                                          \
-template<typename T1>                                                     \
-_bz_inline_et                                                             \
-_bz_ArrayExpr<_bz_ArrayExprUnaryOp<                                       \
-    _bz_typename asExpr<T1>::T_expr,                                      \
-    functor<_bz_typename asExpr<T1>::T_expr::T_numtype> > >               \
-name(const ETBase<T1>& d1)                                                \
-{                                                                         \
-    return _bz_ArrayExpr<_bz_ArrayExprUnaryOp<                            \
-        _bz_typename asExpr<T1>::T_expr,                                  \
-        functor<_bz_typename asExpr<T1>::T_expr::T_numtype> > >           \
-        (asExpr<T1>::getExpr(d1.unwrap()));                               \
+#define BZ_DECLARE_ARRAY_ET_UNARY(name, functor)                                                          \
+                                                                                                          \
+template<typename T1>                                                                                     \
+_bz_inline_et                                                                                             \
+_bz_ArrayExpr<_bz_ArrayExprUnaryOp<                                                                       \
+    _bz_typename BZ_BLITZ_SCOPE(asExpr)<T1>::T_expr,                                                      \
+    functor<_bz_typename BZ_BLITZ_SCOPE(asExpr)<T1>::T_expr::T_numtype> > >                               \
+name(const BZ_BLITZ_SCOPE(ETBase)<T1>& d1)                                                                \
+{                                                                                                         \
+    return _bz_ArrayExpr<_bz_ArrayExprUnaryOp<                                                            \
+        _bz_typename BZ_BLITZ_SCOPE(asExpr)<T1>::T_expr,                                                  \
+        functor<_bz_typename BZ_BLITZ_SCOPE(asExpr)<T1>::T_expr::T_numtype> > >                           \
+        (BZ_BLITZ_SCOPE(asExpr)<T1>::getExpr(d1.unwrap()));                                               \
 }
 
 /*
@@ -158,96 +158,96 @@
  * which implements the operation.
  */
 
-#define BZ_DECLARE_ARRAY_ET_BINARY(name, applic)                          \
-                                                                          \
-template<typename T1, typename T2>                                        \
-_bz_inline_et                                                             \
-_bz_ArrayExpr<_bz_ArrayExprBinaryOp<                                      \
-    _bz_typename asExpr<T1>::T_expr,                                      \
-    _bz_typename asExpr<T2>::T_expr,                                      \
-    applic<_bz_typename asExpr<T1>::T_expr::T_numtype,                    \
-           _bz_typename asExpr<T2>::T_expr::T_numtype> > >                \
-name(const ETBase<T1>& d1, const ETBase<T2>& d2)                          \
-{                                                                         \
-    return _bz_ArrayExpr<_bz_ArrayExprBinaryOp<                           \
-        _bz_typename asExpr<T1>::T_expr,                                  \
-        _bz_typename asExpr<T2>::T_expr,                                  \
-        applic<_bz_typename asExpr<T1>::T_expr::T_numtype,                \
-               _bz_typename asExpr<T2>::T_expr::T_numtype> > >            \
-        (asExpr<T1>::getExpr(d1.unwrap()),                                \
-         asExpr<T2>::getExpr(d2.unwrap()));                               \
+#define BZ_DECLARE_ARRAY_ET_BINARY(name, applic)                                                          \
+                                                                                                          \
+template<typename T1, typename T2>                                                                        \
+_bz_inline_et                                                                                             \
+_bz_ArrayExpr<_bz_ArrayExprBinaryOp<                                                                      \
+    _bz_typename BZ_BLITZ_SCOPE(asExpr)<T1>::T_expr,                                                      \
+    _bz_typename BZ_BLITZ_SCOPE(asExpr)<T2>::T_expr,                                                      \
+    applic<_bz_typename BZ_BLITZ_SCOPE(asExpr)<T1>::T_expr::T_numtype,                                    \
+           _bz_typename BZ_BLITZ_SCOPE(asExpr)<T2>::T_expr::T_numtype> > >                                \
+name(const BZ_BLITZ_SCOPE(ETBase)<T1>& d1, const BZ_BLITZ_SCOPE(ETBase)<T2>& d2)                          \
+{                                                                                                         \
+    return _bz_ArrayExpr<_bz_ArrayExprBinaryOp<                                                           \
+        _bz_typename BZ_BLITZ_SCOPE(asExpr)<T1>::T_expr,                                                  \
+        _bz_typename BZ_BLITZ_SCOPE(asExpr)<T2>::T_expr,                                                  \
+        applic<_bz_typename BZ_BLITZ_SCOPE(asExpr)<T1>::T_expr::T_numtype,                                \
+               _bz_typename BZ_BLITZ_SCOPE(asExpr)<T2>::T_expr::T_numtype> > >                            \
+        (BZ_BLITZ_SCOPE(asExpr)<T1>::getExpr(d1.unwrap()),                                                \
+         BZ_BLITZ_SCOPE(asExpr)<T2>::getExpr(d2.unwrap()));                                               \
 }
 
-#define BZ_DECLARE_ARRAY_ET_BINARY_TINYVEC(name, applic)                  \
-                                                                          \
-template <typename T1, typename T2, int N>                                \
-_bz_inline_et                                                             \
-_bz_ArrayExprBinaryOp<                                                    \
-    _bz_typename asExpr<TinyVector<T2,N> >::T_expr,                       \
-    _bz_typename asExpr<T1>::T_expr,                                      \
-    applic<TinyVector<T2,N>,                                              \
-    _bz_typename asExpr<T1>::T_expr::T_numtype> >                         \
-name(const TinyVector<T2,N> d1, const ETBase<T1>& d2)                     \
-{                                                                         \
-    return _bz_ArrayExprBinaryOp<                                         \
-        _bz_typename asExpr<TinyVector<T2,N> >::T_expr,                   \
-        _bz_typename asExpr<T1>::T_expr,                                  \
-        applic<TinyVector<T2,N>,                                          \
-        _bz_typename asExpr<T1>::T_expr::T_numtype> >                     \
-        (asExpr<TinyVector<T2,N> >::getExpr(d1),                          \
-         asExpr<T1>::getExpr(d2.unwrap()));                               \
-}                                                                         \
-                                                                          \
-template <typename T1, typename T2, int N>                                \
-_bz_inline_et                                                             \
-_bz_ArrayExprBinaryOp<                                                    \
-    _bz_typename asExpr<T1>::T_expr,                                      \
-    _bz_typename asExpr<TinyVector<T2,N> >::T_expr,                       \
-    applic<_bz_typename asExpr<T1>::T_expr::T_numtype,                    \
-    TinyVector<T2,N> > >                                                  \
-name(const ETBase<T1>& d1, const TinyVector<T2,N> d2)                     \
-{                                                                         \
-    return _bz_ArrayExprBinaryOp<                                         \
-        _bz_typename asExpr<T1>::T_expr,                                  \
-        _bz_typename asExpr<TinyVector<T2,N> >::T_expr,                   \
-        applic<_bz_typename asExpr<T1>::T_expr::T_numtype,                \
-        TinyVector<T2,N> > >                                              \
-        (asExpr<T1>::getExpr(d1.unwrap()),                                \
-         asExpr<TinyVector<T2,N> >::getExpr(d2));                         \
+#define BZ_DECLARE_ARRAY_ET_BINARY_TINYVEC(name, applic)                                                  \
+                                                                                                          \
+template <typename T1, typename T2, int N>                                                                \
+_bz_inline_et                                                                                             \
+_bz_ArrayExprBinaryOp<                                                                                    \
+    _bz_typename BZ_BLITZ_SCOPE(asExpr)<BZ_BLITZ_SCOPE(TinyVector)<T2,N> >::T_expr,                       \
+    _bz_typename BZ_BLITZ_SCOPE(asExpr)<T1>::T_expr,                                                      \
+    applic<BZ_BLITZ_SCOPE(TinyVector)<T2,N>,                                                              \
+    _bz_typename BZ_BLITZ_SCOPE(asExpr)<T1>::T_expr::T_numtype> >                                         \
+name(const BZ_BLITZ_SCOPE(TinyVector)<T2,N> d1, const BZ_BLITZ_SCOPE(ETBase)<T1>& d2)                     \
+{                                                                                                         \
+    return _bz_ArrayExprBinaryOp<                                                                         \
+        _bz_typename BZ_BLITZ_SCOPE(asExpr)<BZ_BLITZ_SCOPE(TinyVector)<T2,N> >::T_expr,                   \
+        _bz_typename BZ_BLITZ_SCOPE(asExpr)<T1>::T_expr,                                                  \
+        applic<BZ_BLITZ_SCOPE(TinyVector)<T2,N>,                                                          \
+        _bz_typename BZ_BLITZ_SCOPE(asExpr)<T1>::T_expr::T_numtype> >                                     \
+        (BZ_BLITZ_SCOPE(asExpr)<BZ_BLITZ_SCOPE(TinyVector)<T2,N> >::getExpr(d1),                          \
+         BZ_BLITZ_SCOPE(asExpr)<T1>::getExpr(d2.unwrap()));                                               \
+}                                                                                                         \
+                                                                                                          \
+template <typename T1, typename T2, int N>                                                                \
+_bz_inline_et                                                                                             \
+_bz_ArrayExprBinaryOp<                                                                                    \
+    _bz_typename BZ_BLITZ_SCOPE(asExpr)<T1>::T_expr,                                                      \
+    _bz_typename BZ_BLITZ_SCOPE(asExpr)<BZ_BLITZ_SCOPE(TinyVector)<T2,N> >::T_expr,                       \
+    applic<_bz_typename BZ_BLITZ_SCOPE(asExpr)<T1>::T_expr::T_numtype,                                    \
+    BZ_BLITZ_SCOPE(TinyVector)<T2,N> > >                                                                  \
+name(const BZ_BLITZ_SCOPE(ETBase)<T1>& d1, const BZ_BLITZ_SCOPE(TinyVector)<T2,N> d2)                     \
+{                                                                                                         \
+    return _bz_ArrayExprBinaryOp<                                                                         \
+        _bz_typename BZ_BLITZ_SCOPE(asExpr)<T1>::T_expr,                                                  \
+        _bz_typename BZ_BLITZ_SCOPE(asExpr)<BZ_BLITZ_SCOPE(TinyVector)<T2,N> >::T_expr,                   \
+        applic<_bz_typename BZ_BLITZ_SCOPE(asExpr)<T1>::T_expr::T_numtype,                                \
+        BZ_BLITZ_SCOPE(TinyVector)<T2,N> > >                                                              \
+        (BZ_BLITZ_SCOPE(asExpr)<T1>::getExpr(d1.unwrap()),                                                \
+         BZ_BLITZ_SCOPE(asExpr)<BZ_BLITZ_SCOPE(TinyVector)<T2,N> >::getExpr(d2));                         \
 }
 
-#define BZ_DECLARE_ARRAY_ET_BINARY_SCALAR(name, applic, sca)              \
-                                                                          \
-template<typename T>                                                      \
-_bz_inline_et                                                             \
-_bz_ArrayExprBinaryOp<                                                    \
-    asExpr<sca >::T_expr,                                                 \
-    _bz_typename asExpr<T>::T_expr,                                       \
-    applic<sca,_bz_typename asExpr<T>::T_expr::T_numtype> >               \
-name(const sca d1, const ETBase<T>& d2)                                   \
-{                                                                         \
-    return _bz_ArrayExprBinaryOp<                                         \
-        asExpr<sca >::T_expr,                                             \
-        _bz_typename asExpr<T>::T_expr,                                   \
-        applic<sca,_bz_typename asExpr<T>::T_expr::T_numtype> >           \
-        (asExpr<sca >::getExpr(d1),                                       \
-         asExpr<T>::getExpr(d2.unwrap()));                                \
-}                                                                         \
-                                                                          \
-template<typename T>                                                      \
-_bz_inline_et                                                             \
-_bz_ArrayExprBinaryOp<                                                    \
-    _bz_typename asExpr<T>::T_expr,                                       \
-    asExpr<sca >::T_expr,                                                 \
-    applic<_bz_typename asExpr<T>::T_expr::T_numtype,sca > >              \
-name(const ETBase<T>& d1, const sca d2)                                   \
-{                                                                         \
-    return _bz_ArrayExprBinaryOp<                                         \
-        _bz_typename asExpr<T>::T_expr,                                   \
-        asExpr<sca >::T_expr,                                             \
-        applic<_bz_typename asExpr<T>::T_expr::T_numtype,sca > >          \
-        (asExpr<T>::getExpr(d1.unwrap()),                                 \
-         asExpr<sca >::getExpr(d2));                                      \
+#define BZ_DECLARE_ARRAY_ET_BINARY_SCALAR(name, applic, sca)                                              \
+                                                                                                          \
+template<typename T>                                                                                      \
+_bz_inline_et                                                                                             \
+_bz_ArrayExprBinaryOp<                                                                                    \
+    BZ_BLITZ_SCOPE(asExpr)<sca >::T_expr,                                                                 \
+    _bz_typename BZ_BLITZ_SCOPE(asExpr)<T>::T_expr,                                                       \
+    applic<sca,_bz_typename BZ_BLITZ_SCOPE(asExpr)<T>::T_expr::T_numtype> >                               \
+name(const sca d1, const BZ_BLITZ_SCOPE(ETBase)<T>& d2)                                                   \
+{                                                                                                         \
+    return _bz_ArrayExprBinaryOp<                                                                         \
+        BZ_BLITZ_SCOPE(asExpr)<sca >::T_expr,                                                             \
+        _bz_typename BZ_BLITZ_SCOPE(asExpr)<T>::T_expr,                                                   \
+        applic<sca,_bz_typename BZ_BLITZ_SCOPE(asExpr)<T>::T_expr::T_numtype> >                           \
+        (BZ_BLITZ_SCOPE(asExpr)<sca >::getExpr(d1),                                                       \
+         BZ_BLITZ_SCOPE(asExpr)<T>::getExpr(d2.unwrap()));                                                \
+}                                                                                                         \
+                                                                                                          \
+template<typename T>                                                                                      \
+_bz_inline_et                                                                                             \
+_bz_ArrayExprBinaryOp<                                                                                    \
+    _bz_typename BZ_BLITZ_SCOPE(asExpr)<T>::T_expr,                                                       \
+    BZ_BLITZ_SCOPE(asExpr)<sca >::T_expr,                                                                 \
+    applic<_bz_typename BZ_BLITZ_SCOPE(asExpr)<T>::T_expr::T_numtype,sca > >                              \
+name(const BZ_BLITZ_SCOPE(ETBase)<T>& d1, const sca d2)                                                   \
+{                                                                                                         \
+    return _bz_ArrayExprBinaryOp<                                                                         \
+        _bz_typename BZ_BLITZ_SCOPE(asExpr)<T>::T_expr,                                                   \
+        BZ_BLITZ_SCOPE(asExpr)<sca >::T_expr,                                                             \
+        applic<_bz_typename BZ_BLITZ_SCOPE(asExpr)<T>::T_expr::T_numtype,sca > >                          \
+        (BZ_BLITZ_SCOPE(asExpr)<T>::getExpr(d1.unwrap()),                                                 \
+         BZ_BLITZ_SCOPE(asExpr)<sca >::getExpr(d2));                                                      \
 }
 
 /*
@@ -257,29 +257,29 @@
  * which implements the operation.
  */
 
-#define BZ_DECLARE_ARRAY_ET_TERNARY(name, applic)                         \
-                                                                          \
-template<typename T1, typename T2, typename T3>                           \
-_bz_inline_et                                                             \
-_bz_ArrayExpr<_bz_ArrayExprTernaryOp<                                     \
-    _bz_typename asExpr<T1>::T_expr,                                      \
-    _bz_typename asExpr<T2>::T_expr,                                      \
-    _bz_typename asExpr<T3>::T_expr,                                      \
-    applic<_bz_typename asExpr<T1>::T_expr::T_numtype,                    \
-           _bz_typename asExpr<T2>::T_expr::T_numtype,                    \
-           _bz_typename asExpr<T3>::T_expr::T_numtype> > >                \
-name(const ETBase<T1>& d1, const ETBase<T2>& d2, const ETBase<T3>& d3)    \
-{                                                                         \
-    return _bz_ArrayExpr<_bz_ArrayExprTernaryOp<                          \
-        _bz_typename asExpr<T1>::T_expr,                                  \
-        _bz_typename asExpr<T2>::T_expr,                                  \
-        _bz_typename asExpr<T3>::T_expr,                                  \
-        applic<_bz_typename asExpr<T1>::T_expr::T_numtype,                \
-               _bz_typename asExpr<T2>::T_expr::T_numtype,                \
-               _bz_typename asExpr<T3>::T_expr::T_numtype> > >            \
-        (asExpr<T1>::getExpr(d1.unwrap()),                                \
-         asExpr<T2>::getExpr(d2.unwrap()),                                \
-         asExpr<T3>::getExpr(d3.unwrap()));                               \
+#define BZ_DECLARE_ARRAY_ET_TERNARY(name, applic)                                                         \
+                                                                                                          \
+template<typename T1, typename T2, typename T3>                                                           \
+_bz_inline_et                                                                                             \
+_bz_ArrayExpr<_bz_ArrayExprTernaryOp<                                                                     \
+    _bz_typename BZ_BLITZ_SCOPE(asExpr)<T1>::T_expr,                                                      \
+    _bz_typename BZ_BLITZ_SCOPE(asExpr)<T2>::T_expr,                                                      \
+    _bz_typename BZ_BLITZ_SCOPE(asExpr)<T3>::T_expr,                                                      \
+    applic<_bz_typename BZ_BLITZ_SCOPE(asExpr)<T1>::T_expr::T_numtype,                                    \
+           _bz_typename BZ_BLITZ_SCOPE(asExpr)<T2>::T_expr::T_numtype,                                    \
+           _bz_typename BZ_BLITZ_SCOPE(asExpr)<T3>::T_expr::T_numtype> > >                                \
+name(const BZ_BLITZ_SCOPE(ETBase)<T1>& d1, const BZ_BLITZ_SCOPE(ETBase)<T2>& d2, const BZ_BLITZ_SCOPE(ETBase)<T3>& d3)    \
+{                                                                                                         \
+    return _bz_ArrayExpr<_bz_ArrayExprTernaryOp<                                                          \
+        _bz_typename BZ_BLITZ_SCOPE(asExpr)<T1>::T_expr,                                                  \
+        _bz_typename BZ_BLITZ_SCOPE(asExpr)<T2>::T_expr,                                                  \
+        _bz_typename BZ_BLITZ_SCOPE(asExpr)<T3>::T_expr,                                                  \
+        applic<_bz_typename BZ_BLITZ_SCOPE(asExpr)<T1>::T_expr::T_numtype,                                \
+               _bz_typename BZ_BLITZ_SCOPE(asExpr)<T2>::T_expr::T_numtype,                                \
+               _bz_typename BZ_BLITZ_SCOPE(asExpr)<T3>::T_expr::T_numtype> > >                            \
+        (BZ_BLITZ_SCOPE(asExpr)<T1>::getExpr(d1.unwrap()),                                                \
+         BZ_BLITZ_SCOPE(asExpr)<T2>::getExpr(d2.unwrap()),                                                \
+         BZ_BLITZ_SCOPE(asExpr)<T3>::getExpr(d3.unwrap()));                                               \
 }
 
 #endif /* BZ_HAVE_TEMPLATES_AS_TEMPLATE_ARGUMENTS */
diff -Naur blitz/array-impl.h ../../blitz-0.9/blitz/array-impl.h
--- blitz/array-impl.h	2005-10-14 01:46:43.000000000 +0200
+++ ../../blitz-0.9/blitz/array-impl.h	2006-07-25 17:50:51.059351709 +0200
@@ -106,6 +106,12 @@
     using T_base::numReferences;
 
 public:
+
+    int getReferenceCount() 
+    {
+    	return numReferences();
+    }
+
     //////////////////////////////////////////////
     // Public Types
     //////////////////////////////////////////////
@@ -985,6 +991,9 @@
 
     const TinyVector<int, N_rank>&    ordering() const
     { return storage_.ordering(); }
+    
+    void                              changeOrdering(const TinyVector<int, N_rank> &newOrder);
+    void                              changeShape(const TinyVector<int, N_rank> &newShape);
 
     void                              transposeSelf(int r0, int r1, int r2=0, 
         int r3=0, int r4=0, int r5=0, int r6=0, int r7=0, int r8=0, int 
@@ -992,7 +1001,7 @@
     T_array                           transpose(int r0, int r1, int r2=0,
         int r3=0, int r4=0, int r5=0, int r6=0, int r7=0, int r8=0, int
         r9=0, int r10=0);
-
+	
     int                               rank() const
     { return N_rank; }
 
diff -Naur blitz/funcs.h ../../blitz-0.9/blitz/funcs.h
--- blitz/funcs.h	2005-10-08 03:22:55.000000000 +0200
+++ ../../blitz-0.9/blitz/funcs.h	2006-07-25 17:50:51.511372066 +0200
@@ -2,7 +2,7 @@
 /***************************************************************************
  * blitz/funcs.h            Function objects for math functions
  *
- * $Id: funcs.h,v 1.7 2005/10/08 01:22:55 julianc Exp $
+ * $Id: funcs.h,v 1.8 2006/01/20 20:18:36 julianc Exp $
  *
  * Copyright (C) 1997-2001 Todd Veldhuizen <tveldhui@oonumerics.org>
  *
@@ -77,7 +77,7 @@
 							       \
     template<typename T1>                                      \
     static inline void prettyPrint(BZ_STD_SCOPE(string) &str,  \
-        prettyPrintFormat& format, const T1& t1)               \
+        BZ_BLITZ_SCOPE(prettyPrintFormat)& format, const T1& t1)               \
     {                                                          \
         str += #fun;                                           \
         str += "(";                                            \
@@ -148,7 +148,7 @@
 							       \
     template<typename T1>                                      \
     static inline void prettyPrint(BZ_STD_SCOPE(string) &str,  \
-        prettyPrintFormat& format, const T1& t1)               \
+        BZ_BLITZ_SCOPE(prettyPrintFormat)& format, const T1& t1)               \
     {                                                          \
         str += #fun;                                           \
         str += "(";                                            \
@@ -182,7 +182,7 @@
 							       \
     template<typename T1>                                      \
     static inline void prettyPrint(BZ_STD_SCOPE(string) &str,  \
-        prettyPrintFormat& format, const T1& t1)               \
+        BZ_BLITZ_SCOPE(prettyPrintFormat)& format, const T1& t1)               \
     {                                                          \
         str += #fun;                                           \
         str += "(";                                            \
@@ -233,7 +233,7 @@
 							       \
     template<typename T1>                                      \
     static inline void prettyPrint(BZ_STD_SCOPE(string) &str,  \
-        prettyPrintFormat& format, const T1& t1)               \
+        BZ_BLITZ_SCOPE(prettyPrintFormat)& format, const T1& t1)               \
     {                                                          \
         str += #fun;                                           \
         str += "(";                                            \
@@ -264,7 +264,7 @@
 							          \
     template<typename T1, typename T2>                            \
     static inline void prettyPrint(BZ_STD_SCOPE(string) &str,     \
-        prettyPrintFormat& format, const T1& t1,                  \
+        BZ_BLITZ_SCOPE(prettyPrintFormat)& format, const T1& t1,                  \
         const T2& t2)                                             \
     {                                                             \
         str += #fun;                                              \
@@ -302,7 +302,7 @@
 							          \
     template<typename T1, typename T2>                            \
     static inline void prettyPrint(BZ_STD_SCOPE(string) &str,     \
-        prettyPrintFormat& format, const T1& t1,                  \
+        BZ_BLITZ_SCOPE(prettyPrintFormat)& format, const T1& t1,                  \
         const T2& t2)                                             \
     {                                                             \
         str += #fun;                                              \
@@ -334,7 +334,7 @@
 							       \
     template<typename T1, typename T2>                         \
     static inline void prettyPrint(BZ_STD_SCOPE(string) &str,  \
-        prettyPrintFormat& format, const T1& t1,               \
+        BZ_BLITZ_SCOPE(prettyPrintFormat)& format, const T1& t1,               \
         const T2& t2)                                          \
     {                                                          \
         str += #fun;                                           \
@@ -358,7 +358,7 @@
 							       \
     template<typename T1, typename T2>                         \
     static inline void prettyPrint(BZ_STD_SCOPE(string) &str,  \
-        prettyPrintFormat& format, const T1& t1,               \
+        BZ_BLITZ_SCOPE(prettyPrintFormat)& format, const T1& t1,               \
         const T2& t2)                                          \
     {                                                          \
         str += #fun;                                           \
@@ -382,7 +382,7 @@
 							       \
     template<typename T1, typename T2>                         \
     static inline void prettyPrint(BZ_STD_SCOPE(string) &str,  \
-        prettyPrintFormat& format, const T1& t1,               \
+        BZ_BLITZ_SCOPE(prettyPrintFormat)& format, const T1& t1,               \
         const T2& t2)                                          \
     {                                                          \
         str += #fun;                                           \
@@ -416,7 +416,7 @@
 							          \
     template<typename T1, typename T2>                            \
     static inline void prettyPrint(BZ_STD_SCOPE(string) &str,     \
-        prettyPrintFormat& format, const T1& t1,                  \
+        BZ_BLITZ_SCOPE(prettyPrintFormat)& format, const T1& t1,                  \
         const T2& t2)                                             \
     {                                                             \
         str += #fun;                                              \
@@ -449,7 +449,7 @@
                                                                   \
     template <typename T1, typename T2, typename T3>              \
     static void prettyPrint(BZ_STD_SCOPE(string) &str,            \
-        prettyPrintFormat& format,                                \
+        BZ_BLITZ_SCOPE(prettyPrintFormat)& format,                                \
         const T1& a,const T2& b, const T3& c)                     \
     {                                                             \
         str += #fun;                                              \
@@ -676,6 +676,46 @@
     }
 };
 
+// Blitz min/max functions
+template<typename T_numtype1, typename T_numtype2>
+struct Min {
+    typedef BZ_PROMOTE(T_numtype1, T_numtype2) T_numtype;
+
+    static inline T_numtype
+    apply(T_numtype1 a, T_numtype2 b)
+    { return (a < b ? a : b); }
+
+    template<typename T1, typename T2>
+    static inline void prettyPrint(BZ_STD_SCOPE(string) &str,
+        prettyPrintFormat& format, const T1& t1, const T2& t2)
+    {
+        str += "min(";
+        t1.prettyPrint(str, format);
+        str += ",";
+        t2.prettyPrint(str, format);
+        str += ")";
+    }
+};
+
+template<typename T_numtype1, typename T_numtype2>
+struct Max {
+    typedef BZ_PROMOTE(T_numtype1, T_numtype2) T_numtype;
+
+    static inline T_numtype
+    apply(T_numtype1 a, T_numtype2 b)
+    { return (a > b ? a : b); }
+
+    template<typename T1, typename T2>
+    static inline void prettyPrint(BZ_STD_SCOPE(string) &str,
+        prettyPrintFormat& format, const T1& t1, const T2& t2)
+    {
+        str += "max(";
+        t1.prettyPrint(str, format);
+        str += ",";
+        t2.prettyPrint(str, format);
+        str += ")";
+    }
+};
 
 BZ_NAMESPACE_END
 
