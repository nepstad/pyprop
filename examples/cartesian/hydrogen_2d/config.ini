[Representation]
type = core.CartesianRepresentation_2
rank = 2
nx = 128 
xmin = -5.0
xmax = 5.0
#The rest of this section is to set up the range for each rank
#such that the grid spans from xmin + dx/2 to (and including) 
#xmax - dx/2
#this is to ensure that we do not have any gridpoint in the origin
#where the coloumb potential is singular.
dx = ((%(xmax)s - %(xmin)s) / %(nx)s)
rank0 = [%(xmin)s + %(dx)s/2.0, %(xmax)s + %(dx)s/2.0, %(nx)s]
rank1 = [%(xmin)s + %(dx)s/2.0, %(xmax)s + %(dx)s/2.0, %(nx)s]
rank2 = [%(xmin)s + %(dx)s/2.0, %(xmax)s + %(dx)s/2.0, %(nx)s]
rank3 = [%(xmin)s + %(dx)s/2.0, %(xmax)s + %(dx)s/2.0, %(nx)s]

[InitialCondition]
type = InitialConditionType.Function
function = lambda conf, x: 1.0 #exp(- sum(asarray(x)**2) )

[Potential]
charge = -1.0
soft = 0.1

[GridPotential]
base = "Potential"
type = PotentialType.Static
classname = "SoftColoumbPotential"

[Propagation]
propagator = CartesianPropagator
potential_evaluation = ["GridPotential"]
timestep = -0.001j
duration = 10 
renormalization = True

[Distribution]
model = "LargestStride"
transpose_model = 2 #Core.TransposeModel.TRANSPOSE_SEMI

