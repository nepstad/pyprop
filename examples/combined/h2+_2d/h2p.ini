[Representation]
rank = 2
type = core.CombinedRepresentation_2
representation0 = "RadialRepresentation"
representation1 = "AngularRepresentation"

[RadialRepresentation]
#This section is replaced by either of the two
#radial representations below by a call to
#SetRadialRepresentationType()

[CartesianRadialRepresentation]
type = core.CartesianRepresentation_1
rank = 1
rank0 = [-20, 20, 128]

[TransformedRadialRepresentation]
type = core.TransformedRadialRepresentation
rank = 1
n = 20
transform_type = 3
transform_scaling = 1.

[OrthoPolRadialRepresentation]
type = core.OrthoPolRadialRepresentation
rank = 1
n = 20
polynomial_type = PolynomialType.LaguerrePolynomial
scaling = 1.0
hyperspherical_rank = 3

[AngularRepresentation]
type = core.ReducedSphericalHarmonicRepresentation
rank = 1
maxl = 16

[InitialCondition]
type = InitialConditionType.Function
function = lambda conf, x: x[0] * exp(- abs(x[0]))

[Potential]
type = PotentialType.Static
classname = "H2pPotential"
charge = -1
softing = 0.01
nuclear_separation = 2
nuclear_orientation = 0

[Absorber]
type = PotentialType.Dynamic
classname = "core.SphericalAbsorbingPotential"

[Propagation]
potential_evaluation = ["Potential"] 
#propagator = PamPropagator
#krylov_basis_size = 20
propagator = CombinedPropagator
propagator0 = "RadialPropagator"
propagator1 = "AngularPropagator"
timestep = -0.01j
duration = 5
renormalization = True
silent = False

[Arpack]
krylov_basis_size = 10
krylov_tolerance = 0
krylov_eigenvalue_count = 2
krylov_max_iteration_count = 5000
krylov_use_random_start = False

[RadialPropagator]
propagator = TransformedRadialPropagator
mass = 1.0

[AngularPropagator]
propagator = ReducedSphericalPropagator
mass = 1.0
radial_rank = 0

[Distribution]
proc_rank = 1
initial_distribution = array([1], dtype=int)

