[Representation]
rank = 2
type = core.CombinedRepresentation_2
representation0 = "ElectronRepresentation"
representation1 = "ElectronRepresentation"

[ElectronRepresentation]
type = core.CustomGridRepresentation
rank = 1
function = GetBidirectionalGridExponentialLinear
gamma = 2
inner_count = 50
inner_boundary = 40
outer_boundary = 60

[Potential]
type = PotentialType.Static
storage_model = StaticStorageModel.StorageValue
classname = "H2BornOppenheimerPotential"
strength = 1
nuclear_softing = 1
repulsion_softing = 1
nuclear_separation = 2.2

[LaserPotential]
type = PotentialType.Dynamic
classname = "BornOppenheimerLaserPotential"
field_strength = 0.01
frequency = 0.01
duration = 5
peak_time = 12
phase = 0

[InitialCondition]
type = InitialConditionType.Function
#function = lambda conf, x: (x[0] + x[1]) * exp(- abs(x[0]) - abs(x[1])) 
function = lambda conf, x:  exp(- abs(x[0]) - abs(x[1])) 

[Propagation]
potential_evaluation = ["Potential"] 
#propagator = CombinedPropagator
propagator = PamPropagator
base_propagator = CombinedPropagator
krylov_basis_size = 5
krylov_exponentiation_method = 0
propagator0 = "ElectronPropagator"
propagator1 = "ElectronPropagator"
timestep = -0.05j
duration = 15
renormalization = True
silent = False

[ElectronPropagator]
propagator = CrankNicholsonPropagator
difference_order = 3
mass = 1

[Arpack]
krylov_basis_size = 40
krylov_eigenvalue_count = 7
krylov_tolerance = 0
krylov_max_iteration_count = 1000
krylov_use_random_start = True
counter_on = True


[Distribution]
proc_rank = 1
initial_distribution = array([0], dtype=int)

