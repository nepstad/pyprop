[Representation]
rank = 2
type = core.CombinedRepresentation_2
representation0 = "ElectronRadialRepresentation"
representation1 = "ElectronPolarRepresentation"

[ElectronRadialRepresentation]
type = core.CustomGridRepresentation
rank = 1
function = GetGridLinear
count = 100
xmin = 0
xmax = 20
include_left_boundary = False
include_right_boundary = True

[ElectronPolarRepresentation]
type = core.CartesianRepresentation_1
rank = 1
rank0 = [0, 2*pi, 16]

[Potential]
type = PotentialType.Static
storage_model = StaticStorageModel.StorageValue
classname = "H2BornOppenheimerPotential"
nuclear_softing = 1.0
repulsion_softing = 1.0
nuclear_separation = 2.2

[InitialCondition]
type = InitialConditionType.Function
function = lambda conf, x: x[0] * exp(- abs(x[0])) * sin(x[1] - pi/4)

[Propagation]
potential_evaluation = ["Potential"] 
propagator = CombinedPropagator
#propagator = PamPropagator
#base_propagator = CombinedPropagator
krylov_basis_size = 30
propagator0 = "ElectronRadialPropagator"
propagator1 = "ElectronPolarPropagator"
timestep = -0.001j
duration = 15
renormalization = True
silent = False

[ElectronRadialPropagator]
propagator = CrankNicholsonPropagator
difference_order = 7
mass = 1

[ElectronPolarPropagator]
propagator = PolarPropagator
radial_rank = 0
mass = 1

[Arpack]
krylov_basis_size = 40
krylov_eigenvalue_count = 4
krylov_tolerance = 0
krylov_max_iteration_count = 1000
krylov_use_random_start = True
counter_on = True


[Distribution]
proc_rank = 1
initial_distribution = array([1], dtype=int)

