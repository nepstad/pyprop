[Representation]
type = core.VectorRepresentation
rank = 1
vector_size = 50

[InitialCondition]
type = InitialConditionType.Function
function = lambda conf, x: (x[0] == 0) * 1.0

[Potential]
type = PotentialType.Matrix
matrix_type = MatrixType.Dense
filename = "input/matrixelements_real.h5"
dataset = '/electricfield/xpolarized'
#dataset = '/doubledot/matrixelements'
time_function = lambda conf, t: conf.scaling * conf.e0 * cos(conf.omega * t) * sin(pi*t/conf.fieldtime)**2
scaling = 3.44336611701300
omega = 0.140181
e0 = 0.0015
fieldtime = 9000
#omega = 0.08248
#fieldtime = 4266.

[PotentialD]
type = PotentialType.Static
storage_model = StaticStorageModel.StorageValue
function = GetDiagonalElements
file_name = "input/eigenvalues_real.dat"
scaling = 0.5

[Propagation]
#base_propagator = VectorPropagator
#propagator = OdePropagator
propagator = CombinedPropagator
propagator0 = None
#potential_evaluation = ["Potential", "PotentialD"]
potential_evaluation = ["PotentialD", "Potential", "PotentialD"]
timestep = 1.0
duration = 9000
renormalization = False
relative_error = 1e-11
absolute_error = 1e-11

[Distribution]
proc_array_rank = 1
initial_distribution = array([0])
