[Representation]
type = core.VectorRepresentation
rank = 1
vector_size = 50

[InitialCondition]
type = InitialConditionType.Function
function = lambda conf, x: (x[0] == 0) * 1.0

[FinalState]
states = [2]
population = [1.0]

[Krotov]
control_cutoff = 0.0004
energy_penalty = 1000.0
max_iterations = 8
yield_requirement = 0.99
time_grid_size = 160000

[ControlFunction]
type = PotentialType.Matrix
matrix_type = MatrixType.Dense
filename = 'matrix_elements-X.h5'
dataset = '/doubledot/matrixelements'
time_function = lambda conf, t: conf.e0 / sqrt(conf.omega)
#duration = 5000
omega = 0.082480
e0 = 0.0001
#fieldtime = 5000
#matrix_function = GetMatrix

[Potential1D]
type = PotentialType.Matrix
matrix_type = MatrixType.Diagonal
time_function = lambda conf, t: 1
matrix_function = GetDiagonalElements

[Propagation]
base_propagator = VectorPropagator
propagator = OdePropagator
potential_evaluation = ["ControlFunction", "Potential1D"]
timestep = 0.0125
duration = 2000
renormalization = False

[Distribution]
proc_array_rank = 1
initial_distribution = array([0])
