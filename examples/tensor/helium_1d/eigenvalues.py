#------------------------------------------------------------------------------------
#                       Name generators
#------------------------------------------------------------------------------------
INFO_Eigenvalues = "eigenvalues"

def GetEigenvectorFilename(**args):
	gridPostfix = GetGridPostfix(**args)
	filenamebase = "eigenstates/boundstates" + "_".join(gridPostfix) + ".h5"
	return filenamebase

def GetEigenvectorDatasetName(eigenvectorIndex):
	return "Eigenvector_%i" % eigenvectorIndex 


def GetEigenvectorDatasetPath(eigenvectorIndex):
	return "/Eig/%s" % GetEigenvectorDatasetName(eigenvectorIndex) 


def GetEigenstateFileInfo(filename, infoId):
	if infoId == "eigenvalues":
		#Get energies
		f = tables.openFile(filename, "r")
		try:
			eigenvalues = f.root.Eig.Eigenvalues[:]
		finally:
			f.close()
		return eigenvalues

	else:
		conf = GetEigenstateFileConfig(filename)
		return GetConfigInfo(conf, infoId)

#------------------------------------------------------------------------------------
#                     Finding, saving and loading functions
#------------------------------------------------------------------------------------
def FindAndSaveEigenvectors(**args):
	"""
	Find eigenvectors using Piram, and save them to a HDF5 file with
	name generated by 'GetEigenvectorFilename'
	"""
	#Find some bound states
	solver = FindEigenvalues(**args)

	#...and store 'em
	fname = GetEigenvectorFilename(**args)
	SaveEigenvectors(fname, solver)


def SaveEigenvectors(filename, solver):
	#Get eigenvalue error estimates
	errorEstimatesPIRAM = solver.Solver.GetErrorEstimates()
	convergenceEstimatesEig = solver.Solver.GetConvergenceEstimates()

	#Get eigenvalues
	prop = solver.BaseProblem
	E = array(solver.GetEigenvalues())

	#remove file if it exists
	try:
		if os.path.exists(filename):
			if pyprop.ProcId == 0:
				os.remove(filename)
	except:
		PrintOut("Could not remove %s (%s)" % (filename, sys.exc_info()[1]))

	#Store eigenvalues and eigenvectors
	PrintOut("Now storing eigenvectors...")
	for i in range(len(E)):
		solver.SetEigenvector(prop.psi, i)
		prop.SaveWavefunctionHDF(filename, GetEigenvectorDatasetPath(i))

	if pyprop.ProcId == 0:
		RemoveExistingDataset(filename, "/Eig/Eigenvalues")
		RemoveExistingDataset(filename, "/Eig/ErrorEstimateListPIRAM")
		RemoveExistingDataset(filename, "/Eig/ConvergenceEstimateEig")
		h5file = tables.openFile(filename, "r+")
		try:
			#myGroup = h5file.createGroup("/", "Eig")
			myGroup = h5file.getNode("/Eig")
			h5file.createArray(myGroup, "Eigenvalues", E)
			h5file.createArray(myGroup, "ErrorEstimateListPIRAM", errorEstimatesPIRAM)
			h5file.createArray(myGroup, "ConvergenceEstimateEig", convergenceEstimatesEig)

			#Store config
			myGroup._v_attrs.configObject = prop.Config.cfgObj
			
			#PIRAM stats
			myGroup._v_attrs.opCount = solver.Solver.GetOperatorCount()
			myGroup._v_attrs.restartCount = solver.Solver.GetRestartCount()
			myGroup._v_attrs.orthCount = solver.Solver.GetOrthogonalizationCount()
		finally:
			h5file.close()

