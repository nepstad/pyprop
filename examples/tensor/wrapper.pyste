
CustomPotential = Template("CustomPotential_LaserVelocityDerivativeR1_CoupledSpherical", "coupledlaser.cpp")
CustomPotential("3")

CustomPotential = Template("CustomPotential_LaserVelocityDerivativeR2_CoupledSpherical", "coupledlaser.cpp")
CustomPotential("3")

CustomPotential = Template("CustomPotential_LaserVelocity_CoupledSpherical", "coupledlaser.cpp")
CustomPotential("3")



#declare potential evaluator for cartesian-like potentials
PotentialEvaluator = Template("DynamicPotentialEvaluator", "potential.cpp")

#Compile potential for 1D and 2D
PotentialEvaluator("KineticEnergyPotential<1> 1","KineticEnergyPotential_1")
PotentialEvaluator("KineticEnergyPotential<2> 2","KineticEnergyPotential_2")
PotentialEvaluator("KineticEnergyPotential<3> 3","KineticEnergyPotential_3")

PotentialEvaluator("DipoleLaserPotential<1> 1","DipoleLaserPotential_1")
PotentialEvaluator("DipoleLaserPotential<2> 2","DipoleLaserPotential_2")

PotentialEvaluator("DipoleLaserPotentialVelocityRadialDerivative<2> 2","DipoleLaserPotentialVelocityRadialDerivative_2")
PotentialEvaluator("DipoleLaserPotentialVelocityAngularDerivative<2> 2","DipoleLaserPotentialVelocityAngularDerivative_2")
PotentialEvaluator("DipoleLaserPotentialVelocity<2> 2","DipoleLaserPotentialVelocity_2")

PotentialEvaluator("H2pPotential<2> 2","H2pPotential_2")

PotentialEvaluator("CoulombSofted1D<1> 1","CoulombSofted1D_1")

PotentialEvaluator("SingleActiveElectronPotential<2> 2","SingleActiveElectronPotential2D_2")

PotentialEvaluator("OverlapPotential<3> 3","OverlapPotential_3")

PotentialEvaluator("AngularKineticEnergyPotential<2> 2","AngularKineticEnergyPotential_2")

PotentialEvaluator("RadialHarmonicPotential<1> 1","RadialHarmonicPotential_1")
PotentialEvaluator("RadialHarmonicPotential<2> 2","RadialHarmonicPotential_2")
PotentialEvaluator("RadialCoulombPotential<1> 1","RadialCoulombPotential_1")
PotentialEvaluator("RadialCoulombPotential<2> 2","RadialCoulombPotential_2")

module_code('def("RepresentPotentialInBasisBSpline", RepresentPotentialInBasisBSpline<cplx, 1>);\n')
module_code('def("RepresentPotentialInBasisBSpline", RepresentPotentialInBasisBSpline<cplx, 2>);\n')
module_code('def("RepresentPotentialInBasisBSpline", RepresentPotentialInBasisBSpline<cplx, 3>);\n')

module_code('def("RepresentPotentialInBasisReducedSphericalHarmonic", RepresentPotentialInBasisReducedSphericalHarmonic<cplx, 1>);\n')
module_code('def("RepresentPotentialInBasisReducedSphericalHarmonic", RepresentPotentialInBasisReducedSphericalHarmonic<cplx, 2>);\n')
module_code('def("RepresentPotentialInBasisReducedSphericalHarmonic", RepresentPotentialInBasisReducedSphericalHarmonic<cplx, 3>);\n')

module_code('def("RepresentPotentialInBasisFiniteDifference", RepresentPotentialInBasisFiniteDifference<cplx, 1>);\n')
module_code('def("RepresentPotentialInBasisFiniteDifference", RepresentPotentialInBasisFiniteDifference<cplx, 2>);\n')
module_code('def("RepresentPotentialInBasisFiniteDifference", RepresentPotentialInBasisFiniteDifference<cplx, 3>);\n')

module_code('def("MultiplyTensorPotential_1", MultiplyTensorPotential_1<cplx>);\n')
module_code('def("MultiplyTensorPotential_2", MultiplyTensorPotential_2<cplx>);\n')

Class("CoupledSphericalSelectionRule", "coupledspherical.cpp")
Class("CoupledSphericalSelectionRuleR12", "coupledspherical.cpp")
Class("CoupledSphericalSelectionRuleLinearPolarizedField", "coupledspherical.cpp")

CustomPotential = Template("CustomPotentialEvaluationR12", "coupledspherical.cpp")
CustomPotential("3", "CustomPotentialEvaluationR12_3")

CustomPotential = Template("CustomPotentialEvaluationLinearPolarizedField", "coupledspherical.cpp")
CustomPotential("3", "CustomPotentialEvaluationLinearPolarizedField_3")

CustomPotential = Template("CustomPotentialEvaluationLinearPolarizedFieldDerivativeR1", "coupledspherical.cpp")
CustomPotential("3", "CustomPotentialEvaluationLinearPolarizedFieldDerivativeR1_3")

CustomPotential = Template("CustomPotentialEvaluationLinearPolarizedFieldDerivativeR2", "coupledspherical.cpp")
CustomPotential("3", "CustomPotentialEvaluationLinearPolarizedFieldDerivativeR2_3")

CustomPotential = Template("CustomPotentialEvaluationLinearPolarizedFieldLength", "coupledspherical.cpp")
CustomPotential("3", "CustomPotentialEvaluationLinearPolarizedFieldLength_3")

CustomPotential = Template("CoupledSphericalKineticEnergyEvaluator", "coupledspherical.cpp")
CustomPotential("3", "CoupledSphericalKineticEnergyEvaluator_3")

PotentialEvaluator = Template("DynamicPotentialEvaluator", "coupledspherical.cpp")
PotentialEvaluator("CoupledSphericalCoulombPotential<3> 3", "CoupledSphericalCoulombPotential_3")

CustomPotential = Template("CustomPotential_LaserVelocity1_ReducedSpherical", "potential.cpp")
CustomPotential("2")

CustomPotential = Template("CustomPotential_LaserVelocity2_ReducedSpherical", "potential.cpp")
CustomPotential("2")


#declaration_code('#include "parallel_multiply_wrapper.cpp"')
##module_code('def("BandedMatrixMultiply_Wrapper", BandedMatrixMultiply_Wrapper);')
#
##module_code('def("VectorDotProduct", VectorDotProduct<1>);')
##module_code('def("VectorDotProduct", VectorDotProduct<2>);')
##module_code('def("VectorDotProduct", VectorDotProduct<3>);')

