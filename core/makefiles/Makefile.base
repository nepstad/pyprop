include makefiles/Makefile.include
include ../Makefile.platform

#output
MODULE_NAME	  = libcore
OUTPUT		  = ../pyprop/core/$(MODULE_NAME).so
OUTPUT_STATIC = ./lib/$(MODULE_NAME).a

#pyste source files
#IMPORTANT: The order of these files ARE significant
#due to a required change in pyste. Any base class must be
#exported before its subclasses
PYSTEFILES = \
	python/papi.pyste \
	python/cranknicholson.pyste \
	python/representation.pyste \
	python/combinedrepresentation.pyste \
	python/orthopolrepresentation.pyste \
	python/orthopoltransform.pyste \
	python/orthopolpotentials.pyste \
	python/reducedsphericalrepresentation.pyste \
	python/reducedsphericaltransform.pyste \
	python/vectorrepresentation.pyste \
	python/arrayfunctions.pyste \
	python/orthopolfunctions.pyste \
	python/blitzwrapper.pyste \
	python/cartesianabsorber.pyste \
	python/cartesianfouriertransform.pyste \
	python/cartesiankineticpotential.pyste \
	python/cartesianrange.pyste \
	python/configurationwrapper.pyste \
	python/distributedmodel.pyste \
	python/examplepotential.pyste \
	python/exponentialfinitediff.pyste \
	python/sphericalabsorber.pyste \
	python/sphericalkineticpotential.pyste \
	python/sphericalrange.pyste \
	python/sphericaltransform.pyste \
	python/staticpotential.pyste \
	python/polarpotential.pyste \
	python/transformedgrid.pyste \
	python/reducedsphericalkineticpotential.pyste \
	python/wavefunction.pyste \
	python/blitzblas.pyste \
	python/combinedabsorber.pyste \
	python/tensorpotential.pyste \
	python/customgridrepresentation.pyste \


PYSTEOUTPUTDIR   = python/pysteoutput
PYSTEOUTPUTFILES = $(addprefix $(PYSTEOUTPUTDIR)/_, $(notdir $(PYSTEFILES:%.pyste=%.cpp)))
PYSTEOUTPUT      = python/wrapper.cpp

STATIC_MAIN     	  := utility/python_main
STATIC_MAIN_GENERATOR := utility/python_main.py

#C++ source files
SOURCES= \
	representation/overlapmatrix.cpp \
	transform/orthopol/orthopoltools.cpp \
	transform/orthopol/orthopolpropagator.cpp \
	representation/reducedspherical/thetarepresentation.cpp \
	transform/reducedspherical/reducedsphericaltools.cpp \
	transform/reducedspherical/reducedsphericaltransform.cpp \
	utility/blitzblas.cpp \
	utility/orthogonalpolynomial.cpp \
	utility/gamma.cpp \
	transform/transformedgrid/transformedgridpropagator.cpp \
	transform/transformedgrid/tgridweights.cpp \
	transform/transformedgrid/tgridcheb.cpp \
	transform/transformedgrid/tgridsetup.cpp \
	transform/transformedgrid/tgridxymat.cpp \
	wavefunction.cpp \
	representation/combinedrepresentation.cpp  \
	configuration.cpp \
	transform/radialtransform.cpp \
	transform/fouriertransform.cpp \
	transform/cartesianfouriertransform.cpp \
	transform/spherical/shtools.cpp \
	representation/cartesianrepresentation.cpp \
	representation/spherical/angularrepresentation.cpp \
	mpi/distributedmodel.cpp \
	python/pysteoutput/_main.cpp \
	finitediff/exponentialfinitedifference.cpp \
	utility/timer.cpp \
	tensorpotential/tensorpotentialmultiply_wrapper.cpp \
	representation/customgridrepresentation.cpp \
	$(PYSTEOUTPUTFILES) 
SOURCEFILES=$(notdir $(SOURCES))

FORTRAN_SOURCES = \
	tensorpotential/tensorpotentialmultiply.f90 

#C++ object files
OBJECTS=$(SOURCES:.cpp=.o) $(FORTRAN_SOURCES:.f90=.o)

#autodependencies
DEPDIR = .deps
df = $(DEPDIR)/$(*F)
DEPENDENCIES=$(addprefix $(DEPDIR)/, $(SOURCEFILES:%.cpp=%.P))

#Make static exec if PYPROP_STATIC is set to 1
STATIC_EXEC = ../pyprop-exec
ifeq ($(PYPROP_STATIC),1)
STATIC_DEP = $(OUTPUT_STATIC) $(STATIC_EXEC)
endif

#Make shared lib if PYPROP_DYNAMIC is set to 1
ifeq ($(PYPROP_DYNAMIC),1)
DYNAMIC_DEP = $(OUTPUT)
endif

all: $(STATIC_DEP) $(DYNAMIC_DEP)
	for subdir in $(SUBDIRS); do (cd $${subdir}; $(MAKE) all); done 

#Generate the pyprop-exec file from its python file
$(STATIC_MAIN).cpp: $(OUTPUT_STATIC) 
	python $(STATIC_MAIN_GENERATOR) $(STATIC_MAIN).cpp

#Build the static python executable with all modules
$(STATIC_EXEC): $(OUTPUT_STATIC) $(STATIC_MAIN).cpp $(STATIC_MAIN).o
	rm -f $(STATIC_EXEC)
	$(LD) $(LD_STATIC) -o $(STATIC_EXEC) $(STATIC_MAIN).o $(shell ls lib/lib*.a) $(OUTPUT_STATIC) $(LIBS) $(LDFLAGS) $(PYTHON_STATIC_LIBS) $(FORTRAN_LIBS)

#Build the static library
$(OUTPUT_STATIC): $(OBJECTS) 
	rm -rf $(OUTPUT_STATIC)
	mkdir -p ./lib
	$(AR) cr $(OUTPUT_STATIC) $(OBJECTS)

#Build the shared library
$(OUTPUT): $(OBJECTS) 
	$(LD) $(LD_SHARED) -o $(OUTPUT) $(OBJECTS) $(LIBS) $(LDFLAGS)

#PYSTE-rules
#_%.cpp : ../%.pyste 
#	$(PYSTE) --multiple --out=$(PYSTEOUTPUTDIR) --module=$(MODULE_NAME) $<
#

python/pysteoutput/_main.cpp: 
	$(PYSTE) --multiple --out=$(PYSTEOUTPUTDIR) --module=$(MODULE_NAME) $(PYSTEFILES)
	$(PYSTE) --multiple --out=$(PYSTEOUTPUTDIR) --module=$(MODULE_NAME) --generate-main $(PYSTEFILES)

#CombinedRepresentation depends on some of the generated code
representation/combinedrepresentation.cpp : representation/combinedrepresentation_generated.cpp
representation/combinedrepresentation.cpp : tensorpotential/tensorpotentialmultiply_wrapper.cpp

#Generate combined representation inner product code
representation/combinedrepresentation_generated.cpp: representation/combinedrepresentation_generator.py
	python $< > $*.cpp

#Generate tensorpotential code
tensorpotential/tensorpotentialmultiply_wrapper.cpp: tensorpotential/tensorpotentialmultiply_generator.py
	python -c "execfile('$<'); PrintWrapperCode()" > $*.cpp
	python -c "execfile('$<'); PrintWrapperHeader()" > $*.h

#Generate tensorpotential code
tensorpotential/tensorpotentialmultiply.f90: tensorpotential/tensorpotentialmultiply_generator.py
	python -c "execfile('$<'); PrintFortranCode()" > tensorpotential/tensorpotentialmultiply.f90



clean:
	for subdir in $(SUBDIRS); do (cd $${subdir}; $(MAKE) $@); done 
	rm -rf .deps
	mkdir .deps
	rm -f *.so
	rm -f *.o
	rm -f mpi/*.o
	rm -f potential/*.o
	rm -f python/*.o
	rm -f representation/*.o
	rm -f transform/*.o
	rm -f python/pysteoutput/*.o
	rm -f utility/*.o
	rm -f finitediff/*.o
	rm -f transform/transformedgrid/*.o
	rm -f representation/bspline/*.o
	rm -f representation/combinedrepresentation_generated.cpp
	rm -f tensorpotential/tensorpotentialmultiply.f
	rm -f tensorpotential/tensorpotentialmultiply_wrapper.cpp
	rm -f tensorpotential/tensorpotentialmultiply_wrapper.h
	rm -f indextricks.mod
	rm -f $(OBJECTS)
	
pyclean:
	rm -rf $(PYSTEOUTPUTDIR)
	mkdir $(PYSTEOUTPUTDIR)
	
-include $(DEPENDENCIES)
