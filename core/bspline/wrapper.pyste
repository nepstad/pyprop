#Representation for the bspline representation
BSplineRepresentation = Class("BSpline::BSplineRepresentation", "../representation/bspline/bsplinerepresentation.h")
no_virtual(BSplineRepresentation)
use_shared_ptr(BSplineRepresentation)

BSplineGridRepresentation = Class("BSpline::BSplineGridRepresentation", "../representation/bspline/bsplinegridrepresentation.h")
no_virtual(BSplineGridRepresentation)
use_shared_ptr(BSplineGridRepresentation)

#propagator
BSplinePropagator = Template("BSpline::Propagator", "../transform/bspline/bsplinepropagator.h")
BSplinePropagator("1", "BSplinePropagator_1")
BSplinePropagator("2", "BSplinePropagator_2")
BSplinePropagator("3", "BSplinePropagator_3")
BSplinePropagator("4", "BSplinePropagator_4")

#transform
BSplineTransform = Template("BSpline::BSplineTransform", "../transform/bspline/bsplinetransform.h")
BSplineTransform("1", "BSplineTransform_1")
BSplineTransform("2", "BSplineTransform_2")
BSplineTransform("3", "BSplineTransform_3")
BSplineTransform("4", "BSplineTransform_4")

#bspline main class
BSpline = Class("BSpline::BSpline", "../transform/bspline/bspline.h")
rename(BSpline.BSplineGlobalOverlapIntegral_cplx, "BSplineGlobalOverlapIntegral")
rename(BSpline.BSplineGlobalOverlapIntegral_double, "BSplineGlobalOverlapIntegral")
use_shared_ptr(BSpline)

#Evaluation of potentials in BSplines
declaration_code('#include "../tensorpotential/basis_bspline.h"\n')
module_code('def("RepresentPotentialInBasisBSpline", RepresentPotentialInBasisBSpline<cplx, 1>);\n')
module_code('def("RepresentPotentialInBasisBSpline", RepresentPotentialInBasisBSpline<cplx, 2>);\n')
module_code('def("RepresentPotentialInBasisBSpline", RepresentPotentialInBasisBSpline<cplx, 3>);\n')


